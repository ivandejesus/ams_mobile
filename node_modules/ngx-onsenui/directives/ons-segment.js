var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, Input, Output, EventEmitter, ElementRef } from '@angular/core';
/**
 * @element ons-segment
 * @directive OnsSegment
 * @selector ons-segment
 * @description
 *   [en]Angular directive for `<ons-segment>` component.[/en]
 *   [ja]`<ons-segment>`要素のAngularディレクティブです。[/ja]
 * @example
 *   @Component({
 *     selector: 'app',
 *     template: `
 *       <ons-page>
 *         <ons-toolbar>
 *           <div class="center">
 *             <ons-segment style="width: 280px; margin-top: 8px;" [tabbar]="tabbar" (postchange)="onPostChange($event)">
 *               <button>Page 1</button>
 *               <button>Page 2</button>
 *               <button>Page 3</button>
 *             </ons-segment>
 *           </div>
 *         </ons-toolbar>
 *         <ons-tabbar #tabbar>
 *           <ons-tab [page]="page1" active></ons-tab>
 *           <ons-tab [page]="page2"></ons-tab>
 *           <ons-tab [page]="page3"></ons-tab>
 *         </ons-tabbar>
 *       </ons-page>
 *     `
 *   })
 *   export class AppComponent {
 *     page1 = PageComponent;
 *     page2 = PageComponent;
 *     page3 = PageComponent;
 *
 *     constructor() {}
 *
 *     onPostChange(event: any) {
 *      console.log('postchange event', event);
 *     }
 *   }
 *
 *   @Component({
 *     selector: 'ons-page[tab]',
 *     template: `<h2>Page</h2>`
 *   })
 *   export class PageComponent {
 *     constructor() { }
 *   }
 */
var OnsSegment = /** @class */ (function () {
    function OnsSegment(_elementRef) {
        var _this = this;
        this._elementRef = _elementRef;
        /**
         * @output activeIndexChange
         * @type {number}
         * @desc
         *   [en]Triggers when the index of the active button is changed.[/en]
         *   [ja]アクティブなボタンのインデックスが変化した時に発火します。[/ja]
         */
        this.activeIndexChange = new EventEmitter();
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('postchange', function (event) {
            _this.activeIndexChange.emit(event.index);
        });
    }
    Object.defineProperty(OnsSegment.prototype, "tabbar", {
        /**
         * @input tabbar
         * @type {Type<any>}
         * @desc
         *   [en]The tabbar component to "connect" to the segment. Must be inside the same page. Works only during initialization.[/en]
         *   [ja]このセグメントに紐づけるタブバーを指定します。タブバーはセグメントと同一ページ内に存在する必要があります。初期化時にのみ動作します。[/ja]
         */
        set: function (_tabbar) {
            var _this = this;
            this._element._tabbar = _tabbar;
            this._element._tabbar.setAttribute('hide-tabs', '');
            setImmediate(function () { return _this._element._setChecked(_this._element._tabbar.getActiveTabIndex()); });
            this._element._tabbar.addEventListener('prechange', this._element._onTabbarPreChange);
        },
        enumerable: true,
        configurable: true
    });
    OnsSegment.prototype.ngOnChanges = function () {
        if (this.activeIndex) {
            this._element.setActiveButton(this.activeIndex);
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], OnsSegment.prototype, "activeIndex", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], OnsSegment.prototype, "activeIndexChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], OnsSegment.prototype, "tabbar", null);
    OnsSegment = __decorate([
        Directive({
            selector: 'ons-segment'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], OnsSegment);
    return OnsSegment;
}());
export { OnsSegment };
//# sourceMappingURL=ons-segment.js.map