var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * @element ons-select
 * @directive OnsSelect
 * @selector ons-select
 * @description
 *   [en]Angular directive for `<ons-select>` component.[/en]
 *   [ja]`<ons-select>`要素のAngularディレクティブです。[/ja]
 * @example
 *   <ons-select [(ngModel)]="selectedValue">
 *     <option value="Item A">Item A</option>
 *     <option value="Item B">Item B</option>
 *     <option value="Item C">Item C</option>
 *   </ons-select>
 */
var OnsSelect = /** @class */ (function () {
    function OnsSelect(_elementRef) {
        this._elementRef = _elementRef;
        this._propagateChange = function (_) { };
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    OnsSelect_1 = OnsSelect;
    OnsSelect.prototype._onChange = function (event) {
        this._propagateChange(event.target.value);
    };
    Object.defineProperty(OnsSelect.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSelect.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsSelect.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    OnsSelect.prototype.writeValue = function (obj) {
        this._element.value = obj;
    };
    OnsSelect.prototype.registerOnChange = function (fn) {
        this._propagateChange = fn;
    };
    OnsSelect.prototype.registerOnTouched = function () { };
    var OnsSelect_1;
    OnsSelect = OnsSelect_1 = __decorate([
        Directive({
            selector: 'ons-select',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return OnsSelect_1; }),
                    multi: true,
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], OnsSelect);
    return OnsSelect;
}());
export { OnsSelect };
//# sourceMappingURL=ons-select.js.map