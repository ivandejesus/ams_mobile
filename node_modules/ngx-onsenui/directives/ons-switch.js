var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, Output, HostListener, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * @element ons-switch
 * @directive OnsSwitch
 * @selector ons-switch
 * @description
 *   [en]Angular directive for `<ons-switch>` component.[/en]
 *   [ja]`<ons-switch>`要素のAngularディレクティブです。[/ja]
 * @example
 *   <ons-switch [(value)]="target"></ons-switch>
 */
var OnsSwitch = /** @class */ (function () {
    function OnsSwitch(_elementRef) {
        this._elementRef = _elementRef;
        this._propagateChange = function (_) { };
        this._propagateTouched = function () { };
        /**
         * @output valueChange
         * @type {string}
         * @desc
         *   [en]Triggers when the value is changed.[/en]
         *   [ja]値が変更された時に発火します。[/ja]
         */
        this._valueChange = new EventEmitter();
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    OnsSwitch_1 = OnsSwitch;
    Object.defineProperty(OnsSwitch.prototype, "value", {
        /**
         * @input value
         * @type {boolean}
         * @desc
         *   [en]Specify the value of the `<ons-switch>` component.[/en]
         *   [ja]`ons-switch`コンポーネントに設定する値を指定します。[/ja]
         */
        set: function (target) {
            this._element.checked = !!target;
        },
        enumerable: true,
        configurable: true
    });
    OnsSwitch.prototype._onChange = function (event) {
        this._valueChange.emit(this._element.checked);
        this._propagateChange(this._element.checked);
    };
    OnsSwitch.prototype._onBlur = function () {
        this._propagateTouched();
    };
    OnsSwitch.prototype.ngOnChanges = function (changeRecord) {
        var value = !!changeRecord.value.currentValue;
        this._element.checked = value;
    };
    Object.defineProperty(OnsSwitch.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSwitch.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsSwitch.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    OnsSwitch.prototype.writeValue = function (obj) {
        this._element.checked = obj;
    };
    OnsSwitch.prototype.registerOnChange = function (fn) {
        this._propagateChange = fn;
    };
    OnsSwitch.prototype.registerOnTouched = function (fn) {
        this._propagateTouched = fn;
    };
    var OnsSwitch_1;
    __decorate([
        Input('value'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], OnsSwitch.prototype, "value", null);
    __decorate([
        Output('valueChange'),
        __metadata("design:type", EventEmitter)
    ], OnsSwitch.prototype, "_valueChange", void 0);
    __decorate([
        HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], OnsSwitch.prototype, "_onBlur", null);
    OnsSwitch = OnsSwitch_1 = __decorate([
        Directive({
            selector: 'ons-switch',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return OnsSwitch_1; }),
                    multi: true,
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], OnsSwitch);
    return OnsSwitch;
}());
export { OnsSwitch };
//# sourceMappingURL=ons-switch.js.map