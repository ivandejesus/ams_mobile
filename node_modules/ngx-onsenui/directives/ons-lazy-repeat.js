var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import * as ons from 'onsenui';
var ItemContext = /** @class */ (function () {
    function ItemContext($implicit, index, count) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    return ItemContext;
}());
export { ItemContext };
/**
 * @element ons-lazy-repeat
 * @directive OnsLazyRepeat
 * @selector [ons-lazy-repeat]
 * @description
 *   [en]Angular directive for `<ons-lazy-repeat>` component.[/en]
 *   [ja]`<ons-lazy-repeat>`要素と同じ機能を提供するAngularディレクティブです。[/ja]
 * @example
 *   <ons-list>
 *     <ons-list-item *onsLazyRepeat="let item of items; let i = index">
 *       #{{i}} {{item.msg}}
 *     </ons-list-item>
 *   </ons-list>
 */
var OnsLazyRepeat = /** @class */ (function () {
    function OnsLazyRepeat(_elementRef, _templateRef, _viewContainer) {
        this._elementRef = _elementRef;
        this._templateRef = _templateRef;
        this._viewContainer = _viewContainer;
    }
    Object.defineProperty(OnsLazyRepeat.prototype, "onsLazyRepeatOf", {
        /**
         * @input onsLazyRepeat
         * @desc
         *   [en]Render infinite lists with "let of" syntax in Angular.[/en]
         *   [ja]let of式を指定します。[/ja]
         * @example
         *  <ons-list>
         *    <ons-list-item *onsLazyRepeat="let message of messages">
         *      {{message}}
         *    </ons-list-item>
         *  </ons-list>
         */
        set: function (value) {
            var _this = this;
            this._onsLazyRepeatOf = value;
            this._provider = new ons._internal.LazyRepeatProvider(this._elementRef.nativeElement.parentElement, new ons._internal.LazyRepeatDelegate({
                loadItemElement: function (index, done) {
                    _this._loadItemTemplate(index, done);
                },
                countItems: function () {
                    return _this._onsLazyRepeatOf.length;
                }
            }));
        },
        enumerable: true,
        configurable: true
    });
    OnsLazyRepeat.prototype._loadItemTemplate = function (index, done) {
        var context = new ItemContext(this._onsLazyRepeatOf[index], index, this._onsLazyRepeatOf.length);
        var view = this._viewContainer.createEmbeddedView(this._templateRef, context);
        // dirty fix on createEmbeddedView() does not insert DOM element randomly.
        done({ element: view.rootNodes[0] });
    };
    OnsLazyRepeat.prototype.refresh = function () {
        if (this._provider) {
            this._viewContainer.clear();
            this._provider.refresh();
        }
    };
    OnsLazyRepeat.prototype.ngOnDestroy = function () {
        if (this._provider) {
            this._provider.destroy();
        }
        this._viewContainer.clear();
        this._provider = null;
    };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], OnsLazyRepeat.prototype, "onsLazyRepeatOf", null);
    OnsLazyRepeat = __decorate([
        Directive({
            selector: '[onsLazyRepeat]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            TemplateRef,
            ViewContainerRef])
    ], OnsLazyRepeat);
    return OnsLazyRepeat;
}());
export { OnsLazyRepeat };
//# sourceMappingURL=ons-lazy-repeat.js.map