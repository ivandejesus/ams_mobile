var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Type, Injector, Directive, ElementRef, Input, ViewContainerRef, ComponentFactoryResolver, NgZone } from '@angular/core';
import * as ons from 'onsenui';
import { Params } from '../ons/params';
/**
 * @element ons-splitter-side
 * @directive OnsSplitterSide
 * @selector ons-splitter-side
 * @description
 *   [ja]`<ons-splitter-side>`要素のAngularディレクティブです。[/ja]
 *   [en]Angular directive for `<ons-splitter-side>` component.[/en]
 * @example
 *   @Component({
 *     selector: 'ons-page',
 *     template: `
 *       <ons-toolbar>
 *         <div class="center">Left Page</div>
 *       </ons-toolbar>
 *       <div class="background"></div>
 *       <div class="content">
 *         Left
 *       </div>
 *     `
 *   })
 *   class SidePageComponent { }
 *
 *   @Component({
 *     selector: 'app',
 *     template: `
 *     <ons-splitter>
 *       <ons-splitter-side [page]="sidePage" side="left" width="200px">
 *       </ons-splitter-side>
 *       <ons-splitter-content>...</ons-splitter-content>
 *     </ons-splitter>
 *     `
 *   })
 *   export class AppComponent {
 *     sidePage = SidePageComponent;
 *   }
 */
var OnsSplitterSide = /** @class */ (function () {
    function OnsSplitterSide(_elementRef, _viewContainer, _resolver, _injector, _zone) {
        this._elementRef = _elementRef;
        this._viewContainer = _viewContainer;
        this._resolver = _resolver;
        this._injector = _injector;
        this._zone = _zone;
        this.element.pageLoader = this._createPageLoader();
    }
    OnsSplitterSide_1 = OnsSplitterSide;
    Object.defineProperty(OnsSplitterSide.prototype, "page", {
        /**
         * @input page
         * @type {Type<any>}
         * @desc
         *   [en]Page content.[/en]
         *   [ja]表示するページコンポーネントのクラスを指定します。[/ja]
         */
        set: function (page) {
            this.element.page = page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSplitterSide.prototype, "element", {
        get: function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSplitterSide.prototype, "nativeElement", {
        get: function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    OnsSplitterSide.prototype._createPageLoader = function () {
        var _this = this;
        var componentRefMap = new WeakMap();
        return new ons.PageLoader(function (_a, done) {
            var page = _a.page, parent = _a.parent, params = _a.params;
            _this._zone.run(function () {
                var injector = Injector.create({
                    providers: [
                        { provide: Params, useValue: new Params(params || {}) },
                        { provide: OnsSplitterSide_1, useValue: _this }
                    ],
                    parent: _this._injector
                });
                var factory = _this._resolver.resolveComponentFactory(page);
                var pageComponentRef = _this._viewContainer.createComponent(factory, 0, injector);
                var pageElement = pageComponentRef.location.nativeElement;
                componentRefMap.set(pageElement, pageComponentRef);
                _this.element.appendChild(pageElement); // dirty fix to insert in correct position
                done(pageElement);
            });
        }, function (element) {
            var componentRef = componentRefMap.get(element);
            if (componentRef) {
                componentRef.destroy();
                componentRefMap.delete(element);
            }
        });
    };
    var OnsSplitterSide_1;
    __decorate([
        Input('page'),
        __metadata("design:type", Type),
        __metadata("design:paramtypes", [Type])
    ], OnsSplitterSide.prototype, "page", null);
    OnsSplitterSide = OnsSplitterSide_1 = __decorate([
        Directive({
            selector: 'ons-splitter-side'
        }),
        __metadata("design:paramtypes", [ElementRef,
            ViewContainerRef,
            ComponentFactoryResolver,
            Injector,
            NgZone])
    ], OnsSplitterSide);
    return OnsSplitterSide;
}());
export { OnsSplitterSide };
/**
 * @element ons-splitter-content
 * @directive OnsSplitterContent
 * @selector ons-splitter-content
 * @description
 *    [ja]`<ons-splitter-content>`要素のためのAngular2 ディレクティブです。[/ja]
 *    [en]Angular directive for `<ons-splitter-content>` component.[/en]
 */
var OnsSplitterContent = /** @class */ (function () {
    function OnsSplitterContent(_elementRef, _viewContainer, _resolver, _injector) {
        this._elementRef = _elementRef;
        this._viewContainer = _viewContainer;
        this._resolver = _resolver;
        this._injector = _injector;
        this.element.pageLoader = this._createPageLoader();
    }
    OnsSplitterContent_1 = OnsSplitterContent;
    Object.defineProperty(OnsSplitterContent.prototype, "page", {
        /**
         * @input page
         * @type {Type<any>}
         * @desc
         *   [en]Specify the page component.[/en]
         *   [ja]表示するページコンポーネントのクラスを指定します。[/ja]
         */
        set: function (page) {
            this.element.page = page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSplitterContent.prototype, "element", {
        get: function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSplitterContent.prototype, "nativeElement", {
        get: function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    OnsSplitterContent.prototype._createPageLoader = function () {
        var _this = this;
        var componentRefMap = new WeakMap();
        return new ons.PageLoader(function (_a, done) {
            var page = _a.page, parent = _a.parent, params = _a.params;
            var injector = Injector.create({
                providers: [
                    { provide: Params, useValue: new Params(params || {}) },
                    { provide: OnsSplitterContent_1, useValue: _this }
                ],
                parent: _this._injector
            });
            var factory = _this._resolver.resolveComponentFactory(page);
            var pageComponentRef = _this._viewContainer.createComponent(factory, 0, injector);
            var pageElement = pageComponentRef.location.nativeElement;
            componentRefMap.set(pageElement, pageComponentRef);
            _this.element.appendChild(pageElement); // dirty fix to insert in correct position
            done(pageElement);
        }, function (element) {
            var componentRef = componentRefMap.get(element);
            if (componentRef) {
                componentRef.destroy();
                componentRefMap.delete(element);
            }
        });
    };
    var OnsSplitterContent_1;
    __decorate([
        Input('page'),
        __metadata("design:type", Type),
        __metadata("design:paramtypes", [Type])
    ], OnsSplitterContent.prototype, "page", null);
    OnsSplitterContent = OnsSplitterContent_1 = __decorate([
        Directive({
            selector: 'ons-splitter-content'
        }),
        __metadata("design:paramtypes", [ElementRef,
            ViewContainerRef,
            ComponentFactoryResolver,
            Injector])
    ], OnsSplitterContent);
    return OnsSplitterContent;
}());
export { OnsSplitterContent };
//# sourceMappingURL=ons-splitter.js.map