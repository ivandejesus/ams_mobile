var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * @element ons-checkbox
 * @directive OnsCheckbox
 * @selector ons-checkbox
 * @description
 *   [en]Angular directive for `<ons-checkbox>` component. You can use `[(ngModel)]` to synchronize the value of `[(ngModel)]` with the array of the selected values.[/en]
 *   [ja]`<ons-checkbox>`要素のAngularディレクティブです。 `[(ngModel)]` を使用すると、 `[(ngModel)]` の値を選択された値の配列と同期することができます。[/ja]
 * @example
 *   <ons-checkbox value="Item A" [(ngModel)]="selectedValues"></ons-checkbox>
 *   <ons-checkbox value="Item B" [(ngModel)]="selectedValues"></ons-checkbox>
 *   <ons-checkbox value="Item C" [(ngModel)]="selectedValues"></ons-checkbox>
 */
var OnsCheckbox = /** @class */ (function () {
    function OnsCheckbox(_elementRef) {
        this._elementRef = _elementRef;
        this._propagateChange = function (_) { };
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    OnsCheckbox_1 = OnsCheckbox;
    OnsCheckbox.prototype._onChange = function (event) {
        var _a = event.target, value = _a.value, checked = _a.checked;
        var newValue;
        if (this._state instanceof Array) {
            // Is Array
            var index = this._state.indexOf(value);
            var included = index >= 0;
            if (included && !checked) {
                newValue = this._state.slice(0, index).concat(this._state.slice(index + 1, this._state.length));
            }
            if (!included && checked) {
                newValue = this._state.concat([value]);
            }
        }
        else {
            // Is Boolean
            newValue = checked;
        }
        // Emit if value changed
        if (newValue !== undefined) {
            this._state = newValue;
            this._propagateChange(this._state);
        }
    };
    Object.defineProperty(OnsCheckbox.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsCheckbox.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsCheckbox.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    OnsCheckbox.prototype.writeValue = function (obj) {
        this._state = obj;
        if (obj instanceof Array) {
            this._element.checked = obj.indexOf(this._element.value) >= 0;
        }
        else {
            this._element.checked = obj;
        }
    };
    OnsCheckbox.prototype.registerOnChange = function (fn) {
        this._propagateChange = fn;
    };
    OnsCheckbox.prototype.registerOnTouched = function () { };
    var OnsCheckbox_1;
    OnsCheckbox = OnsCheckbox_1 = __decorate([
        Directive({
            selector: 'ons-checkbox',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return OnsCheckbox_1; }),
                    multi: true,
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], OnsCheckbox);
    return OnsCheckbox;
}());
export { OnsCheckbox };
//# sourceMappingURL=ons-checkbox.js.map