var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * @element ons-radio
 * @directive OnsRadio
 * @selector ons-radio
 * @description
 *   [en]Angular directive for `<ons-radio>` component. You can use `[(ngModel)]` to synchronize the value of `[(ngModel)]` with the selected value.[/en]
 *   [ja]`<ons-radio>`要素のAngularディレクティブです。 `[(ngModel)]` を使用すると、 `[(ngModel)]` の値を選択された値と同期することができます。[/ja]
 * @example
 *   <ons-radio value="Item A" [(ngModel)]="selectedValue"></ons-radio>
 *   <ons-radio value="Item B" [(ngModel)]="selectedValue"></ons-radio>
 *   <ons-radio value="Item C" [(ngModel)]="selectedValue"></ons-radio>
 */
var OnsRadio = /** @class */ (function () {
    function OnsRadio(_elementRef) {
        this._elementRef = _elementRef;
        this._propagateChange = function (_) { };
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    OnsRadio_1 = OnsRadio;
    OnsRadio.prototype._onChange = function (event) {
        var _a = event.target, value = _a.value, checked = _a.checked;
        checked && this._propagateChange(value);
    };
    Object.defineProperty(OnsRadio.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsRadio.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsRadio.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    OnsRadio.prototype.writeValue = function (obj) {
        this._element.checked = (obj === this._element.value);
    };
    OnsRadio.prototype.registerOnChange = function (fn) {
        this._propagateChange = fn;
    };
    OnsRadio.prototype.registerOnTouched = function () { };
    var OnsRadio_1;
    OnsRadio = OnsRadio_1 = __decorate([
        Directive({
            selector: 'ons-radio',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return OnsRadio_1; }),
                    multi: true,
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], OnsRadio);
    return OnsRadio;
}());
export { OnsRadio };
//# sourceMappingURL=ons-radio.js.map